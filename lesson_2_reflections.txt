What happens when you initialize a repository?  Why do you need to do it?

Initializing a repository adds the metadata containers for the repository and tells git to treat the folder and its contents as a repository.

How is the staging area different from the working directory and the repository?  What value do you think it offers?

The staging area serves as an intermediate area between the working directory and repository, allowing the user to make sure they have selected the correct files to update in the repository before the commit.

How can you use the staging area to make sure you have one commit per logical change?

You can use 'git dif --staged' to ensure that there is only one logical change in the code before committing.  If you changed multiple files in ways that are not logically connected, you can unstage them and commit them one by one.

What are some situations when branches would be helpful in keeping your history organized?  How would branches help?

Branches would help when adding new or experimental features that you think might break the program.  By having a branch, you can easily revert back to the last stable version when needed.

How do the diagrams help you visualize the branch structure?

Diagrams make the parent-child relationships of the commits easier to see, and give a quick look at what changes are not shared between any two branches.

What is the result of mergine two branches together?  Why do we represent it in the diagram the way we do?

Merging combines the changes made in both branches.  We respresent the merged node as having two parents; the last nodes in each of the merged branches, because it stores the data for both of those branches.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Automatic merging is much faster, but manually merging allows for much greater control over which code changes stay or are removed, and has less potential for breaking the project.